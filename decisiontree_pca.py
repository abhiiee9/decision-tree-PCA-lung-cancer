# -*- coding: utf-8 -*-
"""DecisionTree_PCA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nOC8sAiKqM6dB5UwaI6i3Yxct2uFipgm
"""

# lung_cancer_dt_pca.py
# Decision Tree classification on Lung Cancer dataset with and without PCA

import pandas as pd
import numpy as np

# scikit-learn imports
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.impute import SimpleImputer
from sklearn.decomposition import PCA
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix

# ====== 1. Load and preprocess dataset ======

# Upload file in Colab (skip if running locally)
from google.colab import files
uploaded = files.upload()   # select "Lung_Cancer_dataset.csv"

# Read dataset
df = pd.read_csv("Lung_Cancer_dataset.csv")

# Drop columns that donâ€™t help prediction
df = df.drop(columns=["Name", "Surname"])

# Define features (X) and target (y)
y = df["Result"]
X = df.drop(columns=["Result"])

# Fill missing values (if any) with median
imputer = SimpleImputer(strategy="median")
X = imputer.fit_transform(X)

# Standardize features (important for PCA)
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(
    X_scaled, y, test_size=0.2, random_state=42
)

# ====== 2. Baseline Decision Tree (no PCA) ======

dt = DecisionTreeClassifier(random_state=42)
dt.fit(X_train, y_train)
y_pred = dt.predict(X_test)

# Evaluate model
print("=== Baseline Decision Tree ===")
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Precision:", precision_score(y_test, y_pred))
print("Recall:", recall_score(y_test, y_pred))
print("F1 Score:", f1_score(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

# ====== 3. Decision Tree with PCA ======

# Apply PCA to keep 95% variance
pca = PCA(n_components=0.95)
X_train_pca = pca.fit_transform(X_train)
X_test_pca = pca.transform(X_test)

# Train/evaluate DT on PCA data
dt_pca = DecisionTreeClassifier(random_state=42)
dt_pca.fit(X_train_pca, y_train)
y_pred_pca = dt_pca.predict(X_test_pca)

print("\n=== Decision Tree with PCA ===")
print("Accuracy:", accuracy_score(y_test, y_pred_pca))
print("Precision:", precision_score(y_test, y_pred_pca))
print("Recall:", recall_score(y_test, y_pred_pca))
print("F1 Score:", f1_score(y_test, y_pred_pca))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred_pca))

# ====== 4. Feature importance ======

print("\n=== Feature Importance (Baseline DT) ===")
for i, imp in enumerate(dt.feature_importances_):
    print(f"Feature {i+1}: {imp:.4f}")

print("\nNumber of PCA components retained:", pca.n_components_)